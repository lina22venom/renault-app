import streamlit as st
import pandas as pd
from hashlib import sha256
from datetime import date

# Initialize session state
if 'authenticated' not in st.session_state:
    st.session_state['authenticated'] = False
if 'ko_checks' not in st.session_state:
    st.session_state['ko_checks'] = []
if 'form_data' not in st.session_state:
    st.session_state['form_data'] = {}
if 'page' not in st.session_state:
    st.session_state['page'] = 1
if 'current_menu' not in st.session_state:
    st.session_state['current_menu'] = 'Accueil'

# Hardcoded username and password hash for simplicity
USERNAME = "admin"
PASSWORD_HASH = sha256("password123".encode()).hexdigest()

def authenticate(username, password):
    """Check username and hashed password."""
    return username == USERNAME and sha256(password.encode()).hexdigest() == PASSWORD_HASH

def logout():
    """Log out the current user."""
    st.session_state['authenticated'] = False
    st.session_state['page'] = 1
    st.session_state['current_menu'] = 'Accueil'
    st.experimental_rerun()

def draw_header():
    """Draw Renault Group header."""
    st.markdown(
        """
        <div style="text-align: center;">
            <h1 style="color: #FFA500; font-size: 50px; margin-bottom: -20px;">GROUP</h1>
            <h1 style="color: black; font-size: 50px;">RENAULT</h1>
        </div>
        """,
        unsafe_allow_html=True,
    )

def about_page():
    """Display About information."""
    draw_header()
    st.title("üìñ √Ä propos de cette application")
    st.markdown(
        """
        ## Objectif de l'application
        Cette application est con√ßue pour r√©duire les **temps d'arr√™t** et les **d√©lais de maintenance** en facilitant les contr√¥les rapides et efficaces des √©quipements de soudage.

        ### Fonctionnalit√©s :
        - Analyse bas√©e sur un formulaire pour le contr√¥le d'√©tat des pinces de soudage.
        - Enregistrement automatique des v√©rifications KO (non conformes) avec plans d'action.
        - Page r√©capitulative facile √† comprendre.

        ## Renault Usine Tanger
        **L'usine Renault Tanger** est l'une des installations de fabrication les plus avanc√©es au monde. R√©put√©e pour sa durabilit√© environnementale et son efficacit√© de production, l'usine joue un r√¥le cl√© dans les op√©rations mondiales de Renault.

        ### Points cl√©s :
        - Z√©ro √©mission de carbone.
        - Processus hautement automatis√©s.
        - Technologies avanc√©es de soudage et de peinture.

        ## Langue et droits d'auteur
        - **Langue** : L'application est principalement disponible en fran√ßais, conform√©ment √† son environnement op√©rationnel.
        - **Droits d'auteur** : Renault Group ¬© 2024.

        Pour toute question, veuillez contacter l'administrateur du syst√®me.
        """,
        unsafe_allow_html=True,
    )
    st.button("‚¨ÖÔ∏è Retour au menu", on_click=lambda: st.session_state.update({'current_menu': 'Accueil'}))

def contact_page():
    """Display contact/help information."""
    st.title("üìû Contact/Help")
    st.markdown(
        """
        ## Besoin d'aide ?
        Vous pouvez nous contacter via les informations suivantes :

        - **Email** : support@renaultapp.com
        - **T√©l√©phone** : +212 600 000 000
        - **Adresse** : Renault Usine Tanger, Zone Industrielle, Tanger, Maroc

        Nous sommes disponibles du **lundi au vendredi** de **9h √† 18h**.

        Merci de votre confiance !
        """,
        unsafe_allow_html=True,
    )

def login():
    """Display login form and authenticate user."""
    draw_header()
    st.title("üîí Login")
    st.markdown("<h3 style='color: #2E86C1;'>Veuillez entrer vos identifiants :</h3>", unsafe_allow_html=True)
    username = st.text_input("Nom d'utilisateur")
    password = st.text_input("Mot de passe", type="password")

    if st.button("Se connecter", help="Cliquez pour vous connecter"):
        if authenticate(username, password):
            st.session_state['authenticated'] = True
            st.success("Connexion r√©ussie !")
            st.experimental_rerun()
        else:
            st.error("Nom d'utilisateur ou mot de passe invalide")

def main_app():
    """Main application content after login."""
    draw_header()
    st.title("üìã Fiche d‚ÄôAnalyse et Contr√¥le d‚Äô√âtat de Pince de Soudage")
    st.markdown("<h4 style='color: #2874A6;'>Veuillez remplir le formulaire ci-dessous :</h4>", unsafe_allow_html=True)

    with st.form("fiche_form"):
        st.text_input("Nom", key="Nom")
        st.date_input("Date", key="Date")
        st.text_input("Robot", key="Robot")
        st.text_input("Post", key="Post")
        st.text_input("Ligne", key="Ligne")

        st.subheader("üîç V√©rifications")

        checks = [
            "V√©rifier la bonne r√©f√©rence des √©lectrodes",
            "V√©rifier l'√©tat des √©lectrodes en fin de vie",
            "V√©rifier la qualit√© de rag√©age des √©lectrodes (aspect, alignement) et r√©f√©rence de la fraise (face active)",
            "V√©rifier la fr√©quence changement √©lectrodes",
            "V√©rifier la propret√© de la fraise (Bourrage fraise, clipsage)",
            "V√©rifier le sens de rotation roueuse",
            "V√©rifier l'accostage des t√¥les et la propret√© de la zone (Mastic, peinture, etc.)",
            "V√©rifier la perpendicularit√© de la pince par rapport √† la t√¥le au point de soudure",
            "V√©rifier le d√©bit d'eau (lecture sur le computer)",
            "V√©rifier que l'extr√©mit√© du tube de refroidissement est coup√©e √† un angle de 45¬∞",
            "Contr√¥ler Pression et Intensit√©",
            "Contr√¥ler le programme soudeur par rapport √† la fiche param√®tre",
            "Contr√¥ler la loi de d√©phasage par rapport √† la fiche param√®tre",
            "V√©rifier les param√®tres de rag√©age des √©lectrodes (Fr√©quence et param√®tre rodage)"
        ]

        ko_checks = []
        for check in checks:
            if not st.checkbox(f" {check}", key=check):
                ko_checks.append(check)

        st.selectbox("Qui v√©rifie ?", ["FAB", "OP", "Maint"], key="Qui v√©rifie")

        suivant = st.form_submit_button("‚û°Ô∏è Suivant")

        if suivant:
            if ko_checks:
                st.session_state['ko_checks'] = ko_checks
                st.session_state['page'] = 2
                st.experimental_rerun()
            else:
                st.session_state['page'] = 3
                st.experimental_rerun()

def ko_form(ko_checks):
    """Form for KO checks."""
    draw_header()
    st.title("‚öôÔ∏è Probl√®mes Identifi√©s")
    st.markdown("<h4 style='color: #D35400;'>Veuillez remplir les d√©tails pour les v√©rifications marqu√©es comme KO :</h4>", unsafe_allow_html=True)

    for check in ko_checks:
        st.subheader(f"üö© Probl√®me : {check}")
        st.text_area("Action √† mettre en place", key=f"action_{check}")
        st.text_input("Pilote", key=f"pilote_{check}")
        st.date_input("D√©lai", key=f"delai_{check}")
        st.selectbox("√âtat", ["En cours", "Termin√©"], key=f"etat_{check}")
        st.text_input("Validation CA", key=f"validation_{check}")

    col1, col2 = st.columns(2)
    with col1:
        st.button("‚¨ÖÔ∏è Retour", on_click=lambda: st.session_state.update({'page': 1}))
    with col2:
        st.button("‚û°Ô∏è Suivant", on_click=lambda: st.session_state.update({'page': 3}))

def summary_page():
    """Summary page with submission confirmation."""
    draw_header()
    st.title("üìä R√©sum√© du Formulaire")

    st.markdown("<h4 style='color: #27AE60;'>Informations G√©n√©rales</h4>", unsafe_allow_html=True)
    general_data = {
        "Nom": st.session_state['form_data'].get('Nom', ''),
        "Date": st.session_state['form_data'].get('Date', ''),
        "Robot": st.session_state['form_data'].get('Robot', ''),
        "Post": st.session_state['form_data'].get('Post', ''),
        "Ligne": st.session_state['form_data'].get('Ligne', ''),
        "Qui v√©rifie": st.session_state['form_data'].get('Qui v√©rifie', ''),
    }
    general_df = pd.DataFrame([general_data])
    st.table(general_df)

    st.markdown("<h4 style='color: #E74C3C;'>V√©rifications KO</h4>", unsafe_allow_html=True)
    ko_data = []
    for key, value in st.session_state['form_data'].items():
        if key.startswith("Action_"):
            check_name = key.split("Action_")[1]
            ko_data.append({
                "V√©rification": check_name,
                "Action √† mettre en place": value,
                "Pilote": st.session_state['form_data'].get(f'Pilote_{check_name}', ''),
                "D√©lai": st.session_state['form_data'].get(f'D√©lai_{check_name}', ''),
                "√âtat": st.session_state['form_data'].get(f'√âtat_{check_name}', ''),
                "Validation CA": st.session_state['form_data'].get(f'Validation_CA_{check_name}', ''),
            })
    if ko_data:
        ko_df = pd.DataFrame(ko_data)
        st.table(ko_df)
    else:
        st.write("Aucune v√©rification KO trouv√©e.")

    col1, col2, col3 = st.columns(3)
    with col1:
        st.button("‚¨ÖÔ∏è Retour", on_click=lambda: st.session_state.update({'page': 1}))
    with col2:
        st.button("‚úîÔ∏è Soumettre", on_click=lambda: st.success("Formulaire soumis avec succ√®s !"))
    with col3:
        st.button("üîì D√©connexion", on_click=logout)

# Sidebar menu
with st.sidebar:
    draw_header()
    menu_option = st.radio("Navigation :", ("Accueil", "√Ä propos", "Contact/Help"))
    st.session_state['current_menu'] = menu_option

# Navigation logic
if st.session_state['current_menu'] == "√Ä propos":
    about_page()
elif st.session_state['current_menu'] == "Contact/Help":
    contact_page()
elif st.session_state['current_menu'] == "Accueil":
    if st.session_state['authenticated']:
        if st.session_state['page'] == 1:
            main_app()
        elif st.session_state['page'] == 2:
            ko_form(st.session_state['ko_checks'])
        elif st.session_state['page'] == 3:
            summary_page()
    else:
        login()
